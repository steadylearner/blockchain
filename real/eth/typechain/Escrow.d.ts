/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EscrowInterface extends ethers.utils.Interface {
  functions: {
    "buyer()": FunctionFragment;
    "close()": FunctionFragment;
    "confirmPurchase()": FunctionFragment;
    "confirmReceived()": FunctionFragment;
    "end()": FunctionFragment;
    "listPreviousBuyers()": FunctionFragment;
    "price()": FunctionFragment;
    "refundSeller()": FunctionFragment;
    "restartContract()": FunctionFragment;
    "seller()": FunctionFragment;
    "state()": FunctionFragment;
    "totalSales()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmReceived",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listPreviousBuyers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundSeller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restartContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSales",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listPreviousBuyers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSales", data: BytesLike): Result;

  events: {
    "Closed(uint256)": EventFragment;
    "ConfirmPurchase(uint256,address)": EventFragment;
    "ConfirmReceived(uint256,address)": EventFragment;
    "End(uint256)": EventFragment;
    "Restarted(uint256)": EventFragment;
    "SellerRefunded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "End"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Restarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerRefunded"): EventFragment;
}

export class Escrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EscrowInterface;

  functions: {
    buyer(overrides?: CallOverrides): Promise<[string]>;

    "buyer()"(overrides?: CallOverrides): Promise<[string]>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "close()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmPurchase(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmPurchase()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmReceived(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmReceived()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    end(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "end()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listPreviousBuyers(overrides?: CallOverrides): Promise<[string[]]>;

    "listPreviousBuyers()"(overrides?: CallOverrides): Promise<[string[]]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundSeller(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "refundSeller()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restartContract(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "restartContract()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seller(overrides?: CallOverrides): Promise<[string]>;

    "seller()"(overrides?: CallOverrides): Promise<[string]>;

    state(overrides?: CallOverrides): Promise<[number]>;

    "state()"(overrides?: CallOverrides): Promise<[number]>;

    totalSales(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "totalSales()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  buyer(overrides?: CallOverrides): Promise<string>;

  "buyer()"(overrides?: CallOverrides): Promise<string>;

  close(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "close()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmPurchase(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmPurchase()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmReceived(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmReceived()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  end(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "end()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listPreviousBuyers(overrides?: CallOverrides): Promise<string[]>;

  "listPreviousBuyers()"(overrides?: CallOverrides): Promise<string[]>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  "price()"(overrides?: CallOverrides): Promise<BigNumber>;

  refundSeller(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "refundSeller()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restartContract(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "restartContract()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seller(overrides?: CallOverrides): Promise<string>;

  "seller()"(overrides?: CallOverrides): Promise<string>;

  state(overrides?: CallOverrides): Promise<number>;

  "state()"(overrides?: CallOverrides): Promise<number>;

  totalSales(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSales()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buyer(overrides?: CallOverrides): Promise<string>;

    "buyer()"(overrides?: CallOverrides): Promise<string>;

    close(overrides?: CallOverrides): Promise<void>;

    "close()"(overrides?: CallOverrides): Promise<void>;

    confirmPurchase(overrides?: CallOverrides): Promise<void>;

    "confirmPurchase()"(overrides?: CallOverrides): Promise<void>;

    confirmReceived(overrides?: CallOverrides): Promise<void>;

    "confirmReceived()"(overrides?: CallOverrides): Promise<void>;

    end(overrides?: CallOverrides): Promise<void>;

    "end()"(overrides?: CallOverrides): Promise<void>;

    listPreviousBuyers(overrides?: CallOverrides): Promise<string[]>;

    "listPreviousBuyers()"(overrides?: CallOverrides): Promise<string[]>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundSeller(overrides?: CallOverrides): Promise<void>;

    "refundSeller()"(overrides?: CallOverrides): Promise<void>;

    restartContract(overrides?: CallOverrides): Promise<void>;

    "restartContract()"(overrides?: CallOverrides): Promise<void>;

    seller(overrides?: CallOverrides): Promise<string>;

    "seller()"(overrides?: CallOverrides): Promise<string>;

    state(overrides?: CallOverrides): Promise<number>;

    "state()"(overrides?: CallOverrides): Promise<number>;

    totalSales(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSales()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Closed(when: null): TypedEventFilter<[BigNumber], { when: BigNumber }>;

    ConfirmPurchase(
      when: null,
      by: null
    ): TypedEventFilter<[BigNumber, string], { when: BigNumber; by: string }>;

    ConfirmReceived(
      when: null,
      by: null
    ): TypedEventFilter<[BigNumber, string], { when: BigNumber; by: string }>;

    End(when: null): TypedEventFilter<[BigNumber], { when: BigNumber }>;

    Restarted(when: null): TypedEventFilter<[BigNumber], { when: BigNumber }>;

    SellerRefunded(
      when: null
    ): TypedEventFilter<[BigNumber], { when: BigNumber }>;
  };

  estimateGas: {
    buyer(overrides?: CallOverrides): Promise<BigNumber>;

    "buyer()"(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "close()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmPurchase(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmPurchase()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmReceived(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmReceived()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    end(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "end()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listPreviousBuyers(overrides?: CallOverrides): Promise<BigNumber>;

    "listPreviousBuyers()"(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundSeller(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "refundSeller()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restartContract(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "restartContract()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<BigNumber>;

    "seller()"(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    "state()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSales(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSales()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "close()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmPurchase(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmPurchase()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmReceived(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmReceived()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    end(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "end()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listPreviousBuyers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listPreviousBuyers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundSeller(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "refundSeller()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restartContract(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "restartContract()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "state()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSales(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSales()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
