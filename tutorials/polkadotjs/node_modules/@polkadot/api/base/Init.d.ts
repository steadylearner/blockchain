import type { ApiOptions, ApiTypes, DecorateMethod } from '../types';
import type { VersionedRegistry } from './types';
import { Decorate } from './Decorate';
export declare abstract class Init<ApiType extends ApiTypes> extends Decorate<ApiType> {
    #private;
    constructor(options: ApiOptions, type: ApiTypes, decorateMethod: DecorateMethod<ApiType>);
    /**
     * @description Decorates a registry based on the runtime version
     */
    private _initRegistry;
    /**
     * @description Sets up a registry based on the block hash defined
     */
    getBlockRegistry(blockHash: Uint8Array): Promise<VersionedRegistry>;
    protected _loadMeta(): Promise<boolean>;
    private _metaFromSource;
    private _detectCapabilities;
    private _subscribeUpdates;
    private _metaFromChain;
    private _initFromMeta;
    private _unsubscribeHealth;
    private _unsubscribeUpdates;
    protected _unsubscribe(): void;
}
