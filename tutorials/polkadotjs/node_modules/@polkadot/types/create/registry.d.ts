import type { ExtDef } from '../extrinsic/signedExtensions/types';
import type { ChainProperties, CodecHash, DispatchErrorModule, Hash } from '../interfaces/types';
import type { CallFunction, Codec, CodecHasher, Constructor, InterfaceTypes, RegisteredTypes, Registry, RegistryError, RegistryTypes } from '../types';
import { Metadata } from '@polkadot/metadata/Metadata';
import { GenericEventData } from '../generic/Event';
export declare class TypeRegistry implements Registry {
    #private;
    createdAtHash?: Hash;
    constructor(createdAtHash?: Hash | Uint8Array | string);
    init(): this;
    get chainDecimals(): number[];
    get chainSS58(): number | undefined;
    get chainTokens(): string[];
    get knownTypes(): RegisteredTypes;
    get unknownTypes(): string[];
    get signedExtensions(): string[];
    /**
     * @describe Creates an instance of the class
     */
    createClass<K extends keyof InterfaceTypes>(type: K): Constructor<InterfaceTypes[K]>;
    /**
     * @description Creates an instance of a type as registered
     */
    createType<K extends keyof InterfaceTypes>(type: K, ...params: unknown[]): InterfaceTypes[K];
    findMetaCall(callIndex: Uint8Array): CallFunction;
    findMetaError(errorIndex: Uint8Array | DispatchErrorModule): RegistryError;
    findMetaEvent(eventIndex: Uint8Array): Constructor<GenericEventData>;
    get<T extends Codec = Codec>(name: string, withUnknown?: boolean): Constructor<T> | undefined;
    getChainProperties(): ChainProperties | undefined;
    getClassName(clazz: Constructor): string | undefined;
    getDefinition(typeName: string): string | undefined;
    getModuleInstances(specName: string, moduleName: string): string[] | undefined;
    getOrThrow<T extends Codec = Codec>(name: string, msg?: string): Constructor<T>;
    getOrUnknown<T extends Codec = Codec>(name: string): Constructor<T>;
    getSignedExtensionExtra(): Record<string, keyof InterfaceTypes>;
    getSignedExtensionTypes(): Record<string, keyof InterfaceTypes>;
    hasClass(name: string): boolean;
    hasDef(name: string): boolean;
    hasType(name: string): boolean;
    hash(data: Uint8Array): CodecHash;
    register(type: Constructor | RegistryTypes): void;
    register(name: string, type: Constructor): void;
    private _registerObject;
    setChainProperties(properties?: ChainProperties): void;
    setHasher(hasher?: CodecHasher | null): void;
    setKnownTypes(knownTypes: RegisteredTypes): void;
    setMetadata(metadata: Metadata, signedExtensions?: string[], userExtensions?: ExtDef): void;
    setSignedExtensions(signedExtensions?: string[], userExtensions?: ExtDef): void;
}
