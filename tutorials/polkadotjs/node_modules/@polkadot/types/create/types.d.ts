import type { Codec, InterfaceTypes } from '../types';
export declare type FromReg<T extends Codec, K extends string> = K extends keyof InterfaceTypes ? InterfaceTypes[K] : T;
export declare enum TypeDefInfo {
    BTreeMap = 0,
    BTreeSet = 1,
    Compact = 2,
    Enum = 3,
    Linkage = 4,
    Option = 5,
    Plain = 6,
    Result = 7,
    Set = 8,
    Struct = 9,
    Tuple = 10,
    Vec = 11,
    VecFixed = 12,
    HashMap = 13,
    Int = 14,
    UInt = 15,
    DoNotConstruct = 16,
    Null = 17
}
export interface TypeDef {
    alias?: Map<string, string>;
    info: TypeDefInfo;
    index?: number;
    displayName?: string;
    length?: number;
    name?: string;
    namespace?: string;
    sub?: TypeDef | TypeDef[];
    type: string;
}
