/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TopProgammingLanguagesInterface extends ethers.utils.Interface {
  functions: {
    "getProgrammingLanguages()": FunctionFragment;
    "include(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "programmingLanguages(uint256)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "totalProgrammingLanguages()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getProgrammingLanguages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "include", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "programmingLanguages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalProgrammingLanguages",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getProgrammingLanguages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "include", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "programmingLanguages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalProgrammingLanguages",
    data: BytesLike
  ): Result;

  events: {};
}

export class TopProgammingLanguages extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TopProgammingLanguagesInterface;

  functions: {
    getProgrammingLanguages(overrides?: CallOverrides): Promise<[string[]]>;

    "getProgrammingLanguages()"(overrides?: CallOverrides): Promise<[string[]]>;

    include(
      lang: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "include(string)"(
      lang: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    programmingLanguages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "programmingLanguages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    remove(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "remove(uint256)"(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalProgrammingLanguages(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalProgrammingLanguages()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getProgrammingLanguages(overrides?: CallOverrides): Promise<string[]>;

  "getProgrammingLanguages()"(overrides?: CallOverrides): Promise<string[]>;

  include(
    lang: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "include(string)"(
    lang: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  programmingLanguages(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "programmingLanguages(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  remove(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "remove(uint256)"(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalProgrammingLanguages(overrides?: CallOverrides): Promise<BigNumber>;

  "totalProgrammingLanguages()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getProgrammingLanguages(overrides?: CallOverrides): Promise<string[]>;

    "getProgrammingLanguages()"(overrides?: CallOverrides): Promise<string[]>;

    include(lang: string, overrides?: CallOverrides): Promise<void>;

    "include(string)"(lang: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    programmingLanguages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "programmingLanguages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    remove(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "remove(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalProgrammingLanguages(overrides?: CallOverrides): Promise<BigNumber>;

    "totalProgrammingLanguages()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getProgrammingLanguages(overrides?: CallOverrides): Promise<BigNumber>;

    "getProgrammingLanguages()"(overrides?: CallOverrides): Promise<BigNumber>;

    include(
      lang: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "include(string)"(
      lang: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    programmingLanguages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "programmingLanguages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "remove(uint256)"(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalProgrammingLanguages(overrides?: CallOverrides): Promise<BigNumber>;

    "totalProgrammingLanguages()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getProgrammingLanguages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProgrammingLanguages()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    include(
      lang: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "include(string)"(
      lang: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    programmingLanguages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "programmingLanguages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "remove(uint256)"(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalProgrammingLanguages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalProgrammingLanguages()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
